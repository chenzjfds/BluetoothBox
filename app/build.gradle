apply plugin: 'com.android.application'

android {
    compileSdkVersion 21
    buildToolsVersion '25.0.0'

    defaultConfig {
        applicationId "com.actions.bluetoothbox"
        minSdkVersion 9
        targetSdkVersion 21
        versionCode gitCommitCount()
        versionName "2.09."
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        setProperty("archivesBaseName", "BluetoothBox_v${versionName}_${releaseTime()}")

    }
    signingConfigs {
        release
    }
    buildTypes {
        debug{
            minifyEnabled false
            signingConfig signingConfigs.release

        }
        release {
            minifyEnabled false
            proguardFiles 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    productFlavors{
        mock{
            //mock is only used in androidTest
            applicationIdSuffix '.mock'
        }
        prod{

        }
    }

    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }

    packagingOptions {
//        fix DuplicateFileException: Duplicate files copied in APK META-INF/maven/com.belerweb/pinyin4j/...
        exclude 'META-INF/maven/com.belerweb/pinyin4j/pom.properties'
        exclude 'META-INF/maven/com.belerweb/pinyin4j/pom.xml'
    }

}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    androidTestCompile('com.android.support.test:runner:0.3') {
        // Necessary if your app targets Marshmallow (since the test runner
        // hasn't moved to Marshmallow yet)
        exclude group: 'com.android.support', module: 'support-annotations'
    }

    androidTestMockCompile ('org.mockito:mockito-core:1.10.19'){
        exclude group: 'org.hamcrest'
    }
    //dex maker is only needed in the dalvik machine
    androidTestMockCompile "com.crittercism.dexmaker:dexmaker:1.4"
    androidTestMockCompile "com.crittercism.dexmaker:dexmaker-dx:1.4"
    androidTestMockCompile ("com.crittercism.dexmaker:dexmaker-mockito:1.4"){
            exclude group: 'org.hamcrest'
    }
    mockCompile ('org.mockito:mockito-core:1.10.19'){
        exclude group: 'org.hamcrest'
    }
    testCompile 'junit:junit:4.12'
    testCompile 'com.google.truth:truth:0.28'
    testCompile "org.robolectric:robolectric:3.1-rc1"
    compile 'com.belerweb:pinyin4j:2.5.0'

    compile project(':sm')
    if (useLocalSource == '1') {
        println 'Using local source code'
       // debugCompile project(path: ':ibluz', configuration: 'ibluzDebug') //
      //  releaseCompile project(path: ':ibluz', configuration: 'ibluzRelease') //
    } else {
        compile 'com.actions:ibluz:1.1.4'
    }
    //should not update this since abs is not update with support library
    compile 'com.android.support:support-v4:22.2.1'
    compile 'com.actionbarsherlock:actionbarsherlock:4.4.0@aar'
}

// Remove mockRelease as it's not needed.
android.variantFilter { variant ->
    if(variant.buildType.name.equals('release')
            && variant.getFlavors().get(0).name.equals('mock')) {
        variant.setIgnore(true);
    }
}



def File propFile = file('signing.properties');
if (propFile.exists()) {
    def Properties props = new Properties()
    props.load(new FileInputStream(propFile))

    if (props != null
            &&props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
            props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
        def keystoreFile = file (props["STORE_FILE"])
        if (keystoreFile.canRead()) {
            android.signingConfigs.release.storeFile = keystoreFile
            android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
            android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
            android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
        } else {
            println("keystore file not found: " + props["KEYSTORE_FILE"])
            android.buildTypes.release.signingConfig = null
        }

    } else {
        println("signing.properties found but some entries missing")
        android.buildTypes.release.signingConfig = null
    }
} else {
    println("signing.properties not found " )
    android.buildTypes.release.signingConfig = null
}

def gitSha() {
    return 'git rev-parse --short HEAD'.execute().text.trim().substring(0,4)
}
def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}
def gitCommitCount() {
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-list', '--count', 'HEAD'
            standardOutput = stdout
        }
        def commitCount = stdout.toString().trim().toInteger()
        return commitCount
    }
    catch (ignored) {
        return 0;
    }
}